# Tips and tricks {#tipsandtricks}
```{r, fig.align = 'center',out.width= '30%', echo=FALSE }
knitr::include_graphics(path = "figures/skateboard_trick.png", auto_pdf = TRUE)
``` 

## Tab complete
Tab complete is a method to quickly type commands and file paths without error. In bioinformatics tab complete is your best friend. The tab key looks like:
```{r, fig.align = 'center',out.width= '15%', echo=FALSE }
knitr::include_graphics(path = "figures/tab_complete.png", auto_pdf = TRUE)
``` 
Tab complete serves the following purposes:

1. To complete path names and commands
2. To list all content that starts with what you have already typed
3. To ensure you have no typos

In the below examples press the tab button when you see __\<tab>__ and __replace xxx with your user number.__

Move into the directory __"1_directory"__
```{bash eval=FALSE}
cd /pub39/t<tab>n<tab>xxx<tab>L<tab>1_d<tab>
``` 

Print out all the content within the current directory that starts with __"1_"__ in the file or directory name. This is carried out with a double tab.

__Note__: the __"./"__ is put before the 1 so it only looks in the current directory otherwise it will also look for commands. 
```{bash eval=FALSE}
./1_<tab><tab>
``` 

List the contents of directory __"1_1_directory"__
```{bash eval=FALSE}
ls 1_1<tab>
``` 

Change directory to __"1_2_directory"__. The __"./"__ is not needed before the file name as tab will only look for directories because it is used for an argument of the `cd` command.
```{bash eval=FALSE}
cd 1_2<tab>
``` 

Change directory to __example_1_part_1__. The last tab will add the __"/"__ to the end of the directory name, this informs you that you have correctly and fully typed in the directory name. However, this will not always occur if there is another directory name that starts the same but is longer. That is where double tab comes in handy.
```{bash eval=FALSE}
cd e<tab>1<tab>1<tab>
``` 

In this practical session I have given paths purposefully long names. This has been carried out to demonstrate the usefulness of tab complete and to encourage its use. Although they have been artificially extended in this case, in Bioinformatics long and informative path names are advised. 

## Ending a command
There are times when you will want to abandon a command on the command line. To do this simple press __‘Ctrl’ + ‘c’__.

This is useful if a command won't respond or you noticed you have run a command with a typo or with the wrong file.

## History
```{r, fig.align = 'center',out.width= '15%', echo=FALSE }
knitr::include_graphics(path = "figures/history.png", auto_pdf = TRUE)
``` 
Linux will save commands you have previously entered. In the terminal, whilst at the command line, you can press the up and down keys to scroll through your history. You can then rerun previous commands or edit them with the left and right arrow keys, and run the edited version. 

## Clear
The `clear` command can be used to clear all the text from the terminal. This is useful for keeping a tidy terminal.

## Bash escape
To continue a command on a new line on the command line use the backslash character,  __`\`__. When you press `\` followed by enter, the command will not run and you will be on a new line on the command line. This can be useful for clarity and for long commands. 
In the below example press "enter" after the end of a line.

Print to screen the term “Hello universe, today is a very nice day. Don’t you think so?”
```{bash eval=FALSE}
echo \
“Hello universe, today is a very nice day. Don’t you think so?”
```
Notice that there is a space before the `\`. This is because there needs to be a space between the echo and text to print out. It is always recommended to use a space before a `\` to bash escape.

Bash escape is useful for this document as it will show if commands in this document are separate commands or one command over multiple lines.

## Annotations
```{r, fig.align = 'center',out.width= '15%', echo=FALSE }
knitr::include_graphics(path = "figures/hashtag.png", auto_pdf = TRUE)
``` 

You can annotate your code so it will not run. This is carried out by putting a `#` at the start of a code line.

An example:

```{bash eval=FALSE}
#This line is annotation and will not run
#The below line will print out the text "this line is not annotated"
echo "this line is not annotated"
```

This is useful to give yourself information about what your code is doing and it is vital if you are creating scripts. We will also use annotations in this workbook to explain what some lines of code are doing.

I also find it useful to put a `#` at the front of a long command that I am typing or editing. This means the command won't run if I accidentally press enter. Just be sure to remove the `#` at the start of the line before you want to run it.

## Navigating directories
```{r, fig.align = 'center',out.width= '15%', echo=FALSE }
knitr::include_graphics(path = "figures/tol.png", auto_pdf = TRUE)
``` 
With the skills and knowledge from the above sections you may want to practice navigating directories to get a better feel of it. For this purpose there is a directory called __"~/Linux/TOL"__. This contains directories and subdirectories in the structure of Bacterial and Archaeal taxonomy from the Silva 16S rRNA database.
